class Solution {
    class Time {
        int num;
        boolean start;
        public Time(int num, boolean start) {
            this.num = num;
            this.start = start;
        }
    }
    public int minMeetingRooms(int[][] intervals) {
        PriorityQueue<Time> pq = new PriorityQueue<Time>(intervals.length * 2, (a, b) -> a.num == b.num ? (a.start ? 1 : -1) : a.num - b.num);
        for(int[] interval : intervals) {
            pq.add(new Time(interval[0], true));
            pq.add(new Time(interval[1], false));
        }
        
        int max = 0, count = 0;
        while (!pq.isEmpty()) {
            Time t = pq.poll();
            count = count + (t.start ? 1 : -1);
            max = Math.max(max, count);
        }
        
        return max;
    }
}