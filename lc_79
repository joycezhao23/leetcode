class Solution {
    int m, n;
    
    public boolean exist(char[][] board, String word) {
        if (board.length == 0 || board[0].length == 0) return false;
        m = board.length;
        n = board[0].length;
        
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, i, j, 0, word, visited)) return true;
            }
        }
        
        return false;
    }
    
    int[] dx = {1, 0, -1, 0};
    int[] dy = {0, 1, 0, -1};
    
    private boolean dfs(char[][] board, int x, int y, int pos, String word, boolean[][] visited) {
        if (pos == word.length()) return true;
        if (!isValid(x, y) || visited[x][y] || board[x][y] != word.charAt(pos)) return false;
        visited[x][y] = true;
        
        for (int i = 0; i < 4; i++) {
            int xx = x + dx[i];
            int yy = y + dy[i];
                if (dfs(board, xx, yy, pos + 1, word, visited)) {
                    return true;
                }
        }
        
        visited[x][y] = false;
        return false;
    }
    
    private boolean isValid(int x, int y) {
        return x >= 0 && y >= 0 && x < m && y < n;
    }
}